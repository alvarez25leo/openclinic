package be.openclinic.hl7;

import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Map;
import java.util.Vector;

import be.mxs.common.model.vo.healthrecord.TransactionVO;
import be.mxs.common.util.db.MedwanQuery;
import be.openclinic.medical.Labo;
import ca.uhn.hl7v2.DefaultHapiContext;
import ca.uhn.hl7v2.HL7Exception;
import ca.uhn.hl7v2.HapiContext;
import ca.uhn.hl7v2.app.Connection;
import ca.uhn.hl7v2.app.ConnectionListener;
import ca.uhn.hl7v2.app.HL7Service;
import ca.uhn.hl7v2.model.DataTypeException;
import ca.uhn.hl7v2.model.Message;
import ca.uhn.hl7v2.model.v251.group.OML_O21_SPECIMEN;
import ca.uhn.hl7v2.model.v251.group.OML_O33_OBSERVATION_REQUEST;
import ca.uhn.hl7v2.model.v251.group.OML_O33_ORDER;
import ca.uhn.hl7v2.model.v251.group.OML_O33_SPECIMEN;
import ca.uhn.hl7v2.model.v251.message.OML_O33;
import ca.uhn.hl7v2.model.v251.segment.OBR;
import ca.uhn.hl7v2.model.v251.segment.OBX;
import ca.uhn.hl7v2.model.v251.segment.ORC;
import ca.uhn.hl7v2.model.v251.segment.SPM;
import ca.uhn.hl7v2.parser.CanonicalModelClassFactory;
import ca.uhn.hl7v2.parser.Parser;
import ca.uhn.hl7v2.protocol.ReceivingApplicationExceptionHandler;
import ca.uhn.hl7v2.util.Terser;

public class HL7Server {
	private HL7Service server;
	static String url = null;

	public static void setConnection(String urlValue) throws SQLException {
	    url=urlValue;
	}
	
	public void start(int port) throws InterruptedException {
		boolean useTls = false; // Should we use TLS/SSL?
		HapiContext context = new DefaultHapiContext();
        CanonicalModelClassFactory mcf = new CanonicalModelClassFactory("2.5.1");
        context.setModelClassFactory(mcf);			
		server = context.newServer(port, useTls);
		HL7Receiver handler = new HL7Receiver();
		server.registerApplication("*", "*", handler);
		server.registerConnectionListener(new HL7ConnectionListener());
		server.registerApplication(new HL7Receiver());
		server.startAndWait();
	}
	
	public void stop() {
		server.stopAndWait();
	}
	
    public static class HL7ConnectionListener implements ConnectionListener {
        public void connectionReceived(Connection theC) {
        	System.out.println("New connection received: " + theC.getRemoteAddress().toString());
        }
        public void connectionDiscarded(Connection theC) {
        	System.out.println("Lost connection from: " + theC.getRemoteAddress().toString());
        }
    }
    
    public static class HL7ExceptionHandler implements ReceivingApplicationExceptionHandler {
        /*
		 * Process an exception.
		 * 
		 * @param theIncomingMessage
		 *            the incoming message. This is the raw message which was
		 *            received from the external system
		 * @param theIncomingMetadata
		 *            Any metadata that accompanies the incoming message. See {@link ca.uhn.hl7v2.protocol.Transportable#getMetadata()}
		 * @param theOutgoingMessage
		 *            the outgoing message. The response NAK message generated by
		 *            HAPI.
		 * @param theE
		 *            the exception which was received
		 * @return The new outgoing message. This can be set to the value provided
		 *         by HAPI in <code>outgoingMessage</code>, or may be replaced with
		 *         another message. <b>This method may not return <code>null</code></b>.
		*/
		public String processException(String theIncomingMessage, Map<String, Object> theIncomingMetadata, String theOutgoingMessage, Exception theE) throws HL7Exception {
			/*
			 * Here you can do any processing you like. If you want to change
			 * the response (NAK) message which will be returned you may do
			 * so, or just return the NAK which HAPI already created (theOutgoingMessage) 
			*/
		    return theOutgoingMessage;
		}
    }
    
    public static void storeTransaction(TransactionVO transaction) throws SQLException {
    	java.sql.Connection conn = MedwanQuery.getInstance().getOpenclinicConnection();
    	PreparedStatement ps;
		try {
			ps = conn.prepareStatement("select * from OC_HL7OUT where OC_HL7OUT_SERVERID=? and OC_HL7OUT_TRANSACTIONID=? and OC_HL7OUT_SENT IS NULL");
	    	ps.setInt(1, transaction.getServerId());
	    	ps.setInt(2, transaction.getTransactionId());
	    	ResultSet rs =ps.executeQuery();
	    	if(!rs.next()) {
	    		rs.close();
	    		ps.close();
	    		ps = conn.prepareStatement("insert into OC_HL7OUT(OC_HL7OUT_SERVERID,OC_HL7OUT_TRANSACTIONID,OC_HL7OUT_VERSION,OC_HL7OUT_CREATED) values(?,?,?,?)");
	    		ps.setInt(1, transaction.getServerId());
	    		ps.setInt(2, transaction.getTransactionId());
	    		ps.setInt(3, transaction.getVersion());
	    		ps.setTimestamp(4, new java.sql.Timestamp(new java.util.Date().getTime()));
	    		ps.execute();
	    	}
	    	else {
	    		rs.close();
	    	}
	    	ps.close();
	    	conn.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    public static void storeReceivedMessage(String messageType, Message message) {
    	PreparedStatement ps;
		try {
	    	java.sql.Connection conn =DriverManager.getConnection(url);
			HapiContext context = new DefaultHapiContext();
    		Parser p = context.getPipeParser();
    		String msg = p.encode(message);
    		ps = conn.prepareStatement("insert into OC_HL7IN(OC_HL7IN_ID,OC_HL7IN_TYPE, OC_HL7IN_RECEIVED, OC_HL7IN_MESSAGE) values(?,?,?,?)");
            Terser terser = new Terser(message);
            String id=terser.get("/.MSH-10");
    		ps.setString(1, id);
			ps.setString(2, messageType);
			ps.setTimestamp(3, new java.sql.Timestamp(new java.util.Date().getTime()));
	    	ps.setBytes(4, msg.getBytes());
	    	ps.execute();
	    	ps.close();
	    	conn.close();
		}
		catch(Exception e) {
			e.printStackTrace();
		}
    }
    
    public static void storeReceivedMessageTransactionId(String messageid, int transactionId) {
    	PreparedStatement ps;
		try {
	    	java.sql.Connection conn =DriverManager.getConnection(url);
    		ps = conn.prepareStatement("update OC_HL7IN set OC_HL7IN_TRANSACTIONID=? where OC_HL7IN_ID=?");
    		ps.setInt(1, transactionId);
			ps.setString(2, messageid);
	    	ps.execute();
	    	ps.close();
	    	conn.close();
		}
		catch(Exception e) {
			e.printStackTrace();
		}
    }
    
    public static void setReceivedMessageProcessed(Message message) {
    	PreparedStatement ps;
		try {
	    	java.sql.Connection conn =DriverManager.getConnection(url);
			HapiContext context = new DefaultHapiContext();
    		Parser p = context.getPipeParser();
    		String msg = p.encode(message);
    		ps = conn.prepareStatement("update OC_HL7IN set OC_HL7IN_PROCESSED=? where OC_HL7IN_ID=?");
            Terser terser = new Terser(message);
            String id=terser.get("/.MSH-10");
			ps.setTimestamp(1, new java.sql.Timestamp(new java.util.Date().getTime()));
    		ps.setString(2, id);
	    	ps.execute();
	    	ps.close();
	    	conn.close();
	    	System.out.println("Message ID "+id+" was successfully processed");
		}
		catch(Exception e) {
			e.printStackTrace();
		}
    }
    
    public static void purgeMessages() {
    	PreparedStatement ps;
		try {
			long minute=60000;
			long hour = 60*minute;
			long day=24*hour;
			long time = day*getConfigInt("purgeHL7MessagesOlderThanDays",365);
	    	java.sql.Connection conn =DriverManager.getConnection(url);
    		ps = conn.prepareStatement("delete from OC_HL7IN where OC_HL7IN_RECEIVED<?");
			ps.setTimestamp(1, new java.sql.Timestamp(new java.util.Date().getTime()-time));
	    	ps.execute();
	    	ps.close();
    		ps = conn.prepareStatement("delete from OC_HL7OUT where OC_HL7OUT_SENT<?");
			ps.setTimestamp(1, new java.sql.Timestamp(new java.util.Date().getTime()-time));
	    	ps.execute();
	    	ps.close();
    		ps = conn.prepareStatement("delete from OC_HL7OUT where OC_HL7OUT_CREATED<? and OC_HL7OUT_SENT is null");
			ps.setTimestamp(1, new java.sql.Timestamp(new java.util.Date().getTime()-getConfigInt("purgeHL7UnsampledOrdersOlderThanDays",7)*day));
	    	ps.execute();
	    	ps.close();
	    	conn.close();
		}
		catch(Exception e) {
			e.printStackTrace();
		}
    }
    
    public static void closeTransaction(int serverid,int transactionid) throws SQLException {
    	java.sql.Connection conn =DriverManager.getConnection(url);
    	PreparedStatement ps;
		try {
			ps = conn.prepareStatement("update OC_HL7OUT set OC_HL7OUT_SENT=? where OC_HL7OUT_SERVERID=? and OC_HL7OUT_TRANSACTIONID=? and OC_HL7OUT_SENT IS NULL");
			ps.setTimestamp(1, new java.sql.Timestamp(new java.util.Date().getTime()));
			ps.setInt(2, serverid);
	    	ps.setInt(3, transactionid);
	    	ps.execute();
	    	ps.close();
	    	conn.close();
		}
		catch(Exception e) {
			e.printStackTrace();
		}
    }
    
    public static void setTransactionID(int serverid,int transactionid,String ID) throws SQLException {
    	java.sql.Connection conn = DriverManager.getConnection(url);;
    	PreparedStatement ps;
		try {
			ps = conn.prepareStatement("update OC_HL7OUT set OC_HL7OUT_ID=? where OC_HL7OUT_SERVERID=? and OC_HL7OUT_TRANSACTIONID=? and OC_HL7OUT_SENT IS NULL");
			ps.setString(1, ID);
			ps.setInt(2, serverid);
	    	ps.setInt(3, transactionid);
	    	ps.execute();
	    	ps.close();
	    	conn.close();
		}
		catch(Exception e) {
			e.printStackTrace();
		}
    }
    
    public static void setTransactionACK(String ID,java.util.Date date) throws SQLException {
    	java.sql.Connection conn = DriverManager.getConnection(url);;
    	PreparedStatement ps;
		try {
			ps = conn.prepareStatement("update OC_HL7OUT set OC_HL7OUT_ACK=? where OC_HL7OUT_ID=?");
			ps.setTimestamp(1, new java.sql.Timestamp(date.getTime()));
			ps.setString(2, ID);
			ps.execute();
	    	ps.close();
	    	conn.close();
		}
		catch(Exception e) {
			e.printStackTrace();
		}
    }
    
    public static void setTransactionError(String ID,String error) throws SQLException {
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps;
		try {
			ps = conn.prepareStatement("update OC_HL7OUT set OC_HL7OUT_ERROR=? where OC_HL7OUT_ID=?");
			ps.setString(1, error);
			ps.setString(2, ID);
			ps.execute();
	    	ps.close();
	    	conn.close();
		}
		catch(Exception e) {
			e.printStackTrace();
		}
    }
    
    public static void setTransactionError(int serverid, int transactionid,String error) throws SQLException {
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps;
		try {
			ps = conn.prepareStatement("update OC_HL7OUT set OC_HL7OUT_ERROR=? where OC_HL7OUT_SERVERID=? and OC_HL7OUT_TRANSACTIONID=?");
			ps.setString(1, error);
			ps.setInt(2, serverid);
			ps.setInt(3, transactionid);
			ps.execute();
	    	ps.close();
	    	conn.close();
		}
		catch(Exception e) {
			e.printStackTrace();
		}
    }
    
    public static String checkString(String s){
    	if(s==null) {
    		return "";
    	}
    	else {
    		return s;
    	}
    }
    
    public static boolean existsRequestedLabanalysis(int serverid,int transactionid, String labcode) throws SQLException {
    	boolean exists=false;
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select * from RequestedLabanalyses where serverid=? and transactionid=? and analysiscode=?");
    	ps.setInt(1, serverid);
    	ps.setInt(2, transactionid);
    	ps.setString(3, labcode);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		exists=true;;
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return exists;
    }
    
    public static void updateRequestedLabanalysis(int serverid, int transactionid, String labcode, String field, Object value) throws SQLException {
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	String sql="update RequestedLabanalyses set "+field+"=? where serverid=? and transactionid=? and analysiscode=?";
    	PreparedStatement ps = conn.prepareStatement(sql);
    	ps.setObject(1, value);
    	ps.setInt(2, serverid);
    	ps.setInt(3, transactionid);
    	ps.setString(4, labcode);
    	ps.execute();
    	ps.close();
    	conn.close();
    }
    
    
    public static int getTransactionPersonId(int serverid,int transactionid) throws SQLException {
    	int personid=-1;
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select personid from transactions t,healthrecord h where t.healthrecordid=h.healthrecordid and t.serverid=? and t.transactionid=?");
    	ps.setInt(1, serverid);
    	ps.setInt(2, transactionid);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		personid = rs.getInt("personid");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return personid;
    }
    
    public static int getTransactionVersion(int serverid,int transactionid) throws SQLException {
    	int version=1;
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select version from transactions where serverid=? and transactionid=?");
    	ps.setInt(1, serverid);
    	ps.setInt(2, transactionid);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		version = rs.getInt("version");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return version;
    }
    
    public static int getTransactionUserId(int serverid,int transactionid) throws SQLException {
    	int userid=1;
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select userid from transactions where serverid=? and transactionid=?");
    	ps.setInt(1, serverid);
    	ps.setInt(2, transactionid);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		userid = rs.getInt("userid");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return userid;
    }
    
    public static String getTransactionType(int serverid,int transactionid) throws SQLException {
    	String type="";
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select transactionType from transactions where serverid=? and transactionid=?");
    	ps.setInt(1, serverid);
    	ps.setInt(2, transactionid);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		type = rs.getString("transactionType");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return type;
    }
    
    public static String getEncounterType(int serverid,int transactionid) throws SQLException {
    	String type="";
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select value from items i where serverid=? and transactionid=? and type='be.mxs.common.model.vo.healthrecord.IConstants.ITEM_TYPE_CONTEXT_ENCOUNTERUID'");
    	ps.setInt(1, serverid);
    	ps.setInt(2, transactionid);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		String uid = rs.getString("value");
    		if(uid.split("\\.").length==2) {
    			rs.close();
    			ps.close();
    			ps=conn.prepareStatement("select oc_encounter_type from oc_encounters where oc_encounter_serverid=? and oc_encounter_objectid=?");
    			ps.setInt(1, Integer.parseInt(uid.split("\\.")[0]));
    			ps.setInt(2, Integer.parseInt(uid.split("\\.")[1]));
    			rs=ps.executeQuery();
    			if(rs.next()) {
    				type=rs.getString("oc_encounter_type");
    			}
    		}
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return type;
    }
    
    public static String getEncounterUID(int serverid,int transactionid) throws SQLException {
    	String uid="";
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select value from items i where serverid=? and transactionid=? and type='be.mxs.common.model.vo.healthrecord.IConstants.ITEM_TYPE_CONTEXT_ENCOUNTERUID'");
    	ps.setInt(1, serverid);
    	ps.setInt(2, transactionid);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		uid = rs.getString("value");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return uid;
    }
    
    public static String getEncounterManagerUid(int serverid,int transactionid) throws SQLException {
    	String userid="";
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select value from items i where serverid=? and transactionid=? and type='be.mxs.common.model.vo.healthrecord.IConstants.ITEM_TYPE_CONTEXT_ENCOUNTERUID'");
    	ps.setInt(1, serverid);
    	ps.setInt(2, transactionid);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		String uid = rs.getString("value");
    		if(uid.split("\\.").length==2) {
    			rs.close();
    			ps.close();
    			ps=conn.prepareStatement("select oc_encounter_manageruid from oc_encounter_services where oc_encounter_serverid=? and oc_encounter_objectid=? order by oc_encounter_servicebegindate desc");
    			ps.setInt(1, Integer.parseInt(uid.split("\\.")[0]));
    			ps.setInt(2, Integer.parseInt(uid.split("\\.")[1]));
    			rs=ps.executeQuery();
    			if(rs.next()) {
    				userid=rs.getString("oc_encounter_manageruid");
    			}
    		}
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return userid;
    }
    
    public static java.util.Date getEncounterBegin(int serverid,int transactionid) throws SQLException {
    	java.util.Date begin=null;
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select value from items i where serverid=? and transactionid=? and type='be.mxs.common.model.vo.healthrecord.IConstants.ITEM_TYPE_CONTEXT_ENCOUNTERUID'");
    	ps.setInt(1, serverid);
    	ps.setInt(2, transactionid);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		String uid = rs.getString("value");
    		if(uid.split("\\.").length==2) {
    			rs.close();
    			ps.close();
    			ps=conn.prepareStatement("select oc_encounter_begindate from oc_encounters where oc_encounter_serverid=? and oc_encounter_objectid=?");
    			ps.setInt(1, Integer.parseInt(uid.split("\\.")[0]));
    			ps.setInt(2, Integer.parseInt(uid.split("\\.")[1]));
    			rs=ps.executeQuery();
    			if(rs.next()) {
    				begin=rs.getTimestamp("oc_encounter_begindate");
    			}
    		}
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return begin;
    }
    
    public static String getUserLastname(String userid) throws SQLException {
    	String name="";
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select lastname from usersview u,adminview a where u.personid=a.personid and userid=?");
    	ps.setString(1, userid);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		name = rs.getString("lastname");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return name;
    }
    
    public static String getUserFirstname(String userid) throws SQLException {
    	String name="";
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select firstname from usersview u,adminview a where u.personid=a.personid and userid=?");
    	ps.setString(1, userid);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		name = rs.getString("firstname");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return name;
    }
    
    public static java.util.Date getTransactionDateOfBirth(int serverid,int transactionid) throws SQLException {
    	java.util.Date dob=null;
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select dateofbirth from transactions t,healthrecord h,adminview a where t.healthrecordid=h.healthrecordid and h.personid=a.personid and t.serverid=? and t.transactionid=?");
    	ps.setInt(1, serverid);
    	ps.setInt(2, transactionid);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		dob = rs.getDate("dateofbirth");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return dob;
    }
    
    public static String getTransactionGender(int serverid,int transactionid) throws SQLException {
    	String gender="";
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select gender from transactions t,healthrecord h,adminview a where t.healthrecordid=h.healthrecordid and h.personid=a.personid and t.serverid=? and t.transactionid=?");
    	ps.setInt(1, serverid);
    	ps.setInt(2, transactionid);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		gender = rs.getString("gender");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return gender;
    }
    
    public static String getTransactionLastname(int serverid,int transactionid) throws SQLException {
    	String name="";
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select lastname from transactions t,healthrecord h,adminview a where t.healthrecordid=h.healthrecordid and h.personid=a.personid and t.serverid=? and t.transactionid=?");
    	ps.setInt(1, serverid);
    	ps.setInt(2, transactionid);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		name = rs.getString("lastname");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return name;
    }
    
    public static String getDefaultInsuranceNumber(String insuid) throws SQLException {
    	String uid="";
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select * from oc_insurances where oc_insurance_serverid=? and oc_insurance_objectid=?");
    	ps.setString(1, insuid.split("\\.")[0]);
    	ps.setString(2, insuid.split("\\.")[1]);
    	ResultSet rs = ps.executeQuery();
    	while(rs.next()) {
    		uid = rs.getString("oc_insurance_nr");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return uid;
    }
    
    public static String getDefaultInsuranceCategory(String insuid) throws SQLException {
    	String uid="A";
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select * from oc_insurances where oc_insurance_serverid=? and oc_insurance_objectid=?");
    	ps.setString(1, insuid.split("\\.")[0]);
    	ps.setString(2, insuid.split("\\.")[1]);
    	ResultSet rs = ps.executeQuery();
    	while(rs.next()) {
    		uid = rs.getString("oc_insurance_insurancecategoryletter");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return uid;
    }
    
    public static String getDefaultInsurarUid(String insuid) throws SQLException {
    	String uid="";
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select * from oc_insurances where oc_insurance_serverid=? and oc_insurance_objectid=?");
    	ps.setString(1, insuid.split("\\.")[0]);
    	ps.setString(2, insuid.split("\\.")[1]);
    	ResultSet rs = ps.executeQuery();
    	while(rs.next()) {
    		uid = rs.getString("oc_insurance_insuraruid");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return uid;
    }
    
    public static String getDefaultInsurarName(String insuid) throws SQLException {
    	String name="";
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select * from oc_insurances,oc_insurars where oc_insurar_objectid=replace(oc_insurance_insuraruid,'1.','') and oc_insurance_serverid=? and oc_insurance_objectid=?");
    	ps.setString(1, insuid.split("\\.")[0]);
    	ps.setString(2, insuid.split("\\.")[1]);
    	ResultSet rs = ps.executeQuery();
    	while(rs.next()) {
    		name = rs.getString("oc_insurar_name");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return name;
    }
    
    public static String getDefaultInsurance(int personid) throws SQLException {
    	String uid="";
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select * from oc_insurances where oc_insurance_patientuid=? and (oc_insurance_stop is null OR oc_insurance_stop>?)");
    	ps.setInt(1, personid);
    	ps.setDate(2, new java.sql.Date(new java.util.Date().getTime()));
    	ResultSet rs = ps.executeQuery();
    	while(rs.next()) {
    		uid = rs.getString("oc_insurance_serverid")+"."+rs.getString("oc_insurance_objectid");
    		if(rs.getInt("oc_insurance_default")==1) {
    			break;
    		}
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return uid;
    }
    
    public static String getTransactionFirstname(int serverid,int transactionid) throws SQLException {
    	String name="";
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select firstname from transactions t,healthrecord h,adminview a where t.healthrecordid=h.healthrecordid and h.personid=a.personid and t.serverid=? and t.transactionid=?");
    	ps.setInt(1, serverid);
    	ps.setInt(2, transactionid);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		name = rs.getString("firstname");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return name;
    }
    
    public static java.util.Date getTransactionUpdateTime(int serverid,int transactionid) throws SQLException {
    	java.util.Date date = null;
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select updatetime from transactions where serverid=? and transactionid=?");
    	ps.setInt(1, serverid);
    	ps.setInt(2, transactionid);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		date = rs.getTimestamp("updatetime");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return date;
    }
    
    public static java.util.Date getSpecimenReceivedDateTime(int serverid,int transactionid, String analysis) throws SQLException {
    	java.util.Date date = null;
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select samplereceptiondatetime from requestedlabanalyses where serverid=? and transactionid=? and analysiscode=?");
    	ps.setInt(1, serverid);
    	ps.setInt(2, transactionid);
    	ps.setString(3, analysis);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		date = rs.getTimestamp("samplereceptiondatetime");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return date;
    }
    
    public static String getLabCodeByMedidocCode(String medidoccode) throws SQLException {
    	String labcode="";
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select labcode from labanalysis where medidoccode=?");
    	ps.setString(1, medidoccode);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		labcode = rs.getString("labcode");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return labcode;
    }
    
    public static String getLabCode(String code) throws SQLException {
    	String labcode="";
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select labcode from labanalysis where labcode=?");
    	ps.setString(1, code);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		labcode = rs.getString("labcode");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return labcode;
    }
    
    public static String getLabCodeByAnalyserCode(String analysercode) throws SQLException {
    	String labcode="";
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select labcode from labanalysis where alertvalue=?");
    	ps.setString(1, analysercode);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		labcode = rs.getString("labcode");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return labcode;
    }
    
    public static String getMedidocCodeByLabCode(String labcode) throws SQLException {
    	String code="";
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select medidoccode from labanalysis where labcode=?");
    	ps.setString(1, labcode);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		code = rs.getString("medidoccode");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return code;
    }
    
    public static String getMedidocCodeByLabCode(String labcode, java.sql.Connection conn) throws SQLException {
    	String code="";
    	PreparedStatement ps = conn.prepareStatement("select medidoccode from labanalysis where labcode=?");
    	ps.setString(1, labcode);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		code = rs.getString("medidoccode");
    	}
    	rs.close();
    	ps.close();
    	return code;
    }
    
    public static String getAnalyserCodeByLabCode(String labcode) throws SQLException {
    	String code="";
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select alertvalue from labanalysis where labcode=? and deletetime is null and unavailable=0");
    	ps.setString(1, labcode);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		code = rs.getString("alertvalue");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return code;
    }
    
    public static String getAnalyserCodeByLabCode(String labcode, java.sql.Connection conn) throws SQLException {
    	String code="";
    	PreparedStatement ps = conn.prepareStatement("select alertvalue from labanalysis where labcode=? and deletetime is null and unavailable=0");
    	ps.setString(1, labcode);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		code = rs.getString("alertvalue");
    	}
    	rs.close();
    	ps.close();
    	return code;
    }
    
    public static String getSpecimenTypeByLabCode(String labcode) throws SQLException {
    	String type="";
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps = conn.prepareStatement("select monster from labanalysis where labcode=?");
    	ps.setString(1, labcode);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		type = rs.getString("monster");
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return type;
    }

    public static String getSpecimenTypeByLabCode(String labcode, java.sql.Connection conn) throws SQLException {
    	String type="";
    	PreparedStatement ps = conn.prepareStatement("select monster from labanalysis where labcode=? and deletetime is null");
    	ps.setString(1, labcode);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		type = rs.getString("monster");
    	}
    	rs.close();
    	ps.close();
    	return type;
    }

    public static String getHL7SpecimenTypeBySpecimenCode(String specimencode, java.sql.Connection conn) throws SQLException {
		String specimencodes = HL7Server.getConfigString("HL7SpecimenMappings", "citrate=WB;2=UR;3=ORH;4=STL;5=SPT;7=FLUID", conn);
		String spec="ORH";
		for(int n=0;n<specimencodes.split(";").length;n++) {
			if(specimencode.equalsIgnoreCase(specimencodes.split(";")[n].split("=")[0])) {
				spec=specimencodes.split(";")[n].split("=")[1];
				break;
			}
		}
		return spec;
    }
    
    public static String getHL7SpecimenTypeBySpecimenCode(String specimencode) throws SQLException {
		String specimencodes = HL7Server.getConfigString("HL7SpecimenMappings", "citrate=WB;2=UR;3=ORH;4=STL;5=SPT;7=FLUID");
		String spec="ORH";
		for(int n=0;n<specimencodes.split(";").length;n++) {
			if(specimencode.equalsIgnoreCase(specimencodes.split(";")[n].split("=")[0])) {
				spec=specimencodes.split(";")[n].split("=")[1];
				break;
			}
		}
		return spec;
    }
    
    public static String getHL7SpecimenTypeByLabCode(String labcode) throws SQLException {
    	String specimencode = getSpecimenTypeByLabCode(labcode);
    	return getHL7SpecimenTypeBySpecimenCode(specimencode);
    }
    
    public static String getHL7SpecimenTypeByLabCode(String labcode, java.sql.Connection conn) throws SQLException {
    	String specimencode = getSpecimenTypeByLabCode(labcode,conn);
    	return getHL7SpecimenTypeBySpecimenCode(specimencode,conn);
    }
    
    public static void sendTransactions() throws SQLException {
    	java.sql.Connection conn = DriverManager.getConnection(url);
    	PreparedStatement ps;
		try {
			ps = conn.prepareStatement("select * from OC_HL7OUT where OC_HL7OUT_SENT IS NULL and OC_HL7OUT_ERROR IS NULL and exists (select * from RequestedLabanalyses where serverid=OC_HL7OUT_SERVERID and transactionid=OC_HL7OUT_TRANSACTIONID and worklisteddatetime is null and samplereceptiondatetime is not null)");
	    	ResultSet rs =ps.executeQuery();
	    	while(rs.next()) {
	    		int serverid=rs.getInt("OC_HL7OUT_SERVERID");
	    		int transactionid=rs.getInt("OC_HL7OUT_TRANSACTIONID");
	    		String transactionType=getTransactionType(serverid, transactionid);
	    		if(transactionType.equalsIgnoreCase("be.mxs.common.model.vo.healthrecord.IConstants.TRANSACTION_TYPE_LAB_REQUEST")) {
	    			boolean bSendError = false;
	    			HL7LabOrder order = HL7LabOrder.getHL7LabRequest(serverid,transactionid);
	    			if(order.labanalyses.size()>0) {
	    				//we only send the message if at least 1 analysis had a matching analysercode
	    				boolean bCanSendMessage=false;
	    				Iterator iLabAnalyses = order.labanalyses.iterator();
	    				while(iLabAnalyses.hasNext()) {
	    					String a = (String)iLabAnalyses.next();
	    					if(a.split(";").length>1) {
	    						bCanSendMessage=true;
				    			setTransactionID(serverid,transactionid, order.getMessage().getMSH().getMessageControlID().getValue());
				    			if(HL7Sender.send(order.getMessage(), getConfigString("targetHL7hostname","localhost"), getConfigInt("targetHL7port",12345))) {
				    				//Zet alle reeds verstuurde analyses als "worklisted"
				    				Iterator iLabanalyses = order.labanalyses.iterator();
				    				while(iLabanalyses.hasNext()) {
				    					String labcode = (String)iLabanalyses.next();
				    					System.out.println("set "+labcode+" worklisted");
										updateRequestedLabanalysis(serverid, transactionid, labcode.split(";")[0], "worklisteddatetime",new java.util.Date());
				    				}
				    			}
				    			else {
				    				bSendError=true;
				    				System.out.println("Message "+order.getMessage()+" NOT correctly sent!!!");
				    			}
				    			break;
	    					}
	    				}
	    				if(!bCanSendMessage) { //Analyses exist but none of them is to be sent to AMS. Mark them as "worklisted"
		    				Iterator iLabanalyses = order.labanalyses.iterator();
		    				while(iLabanalyses.hasNext()) {
		    					String labcode = (String)iLabanalyses.next();
								updateRequestedLabanalysis(serverid, transactionid, labcode, "worklisteddatetime",new java.util.Date());
		    				}
	    				}
	    			}
	    			//Indien alle samples ontvangen zijn voor dit order, sluit het dan af
	    			if(!bSendError && getSpecimensUnreceived(serverid, transactionid).size()==0) {
	    				closeTransaction(serverid,transactionid);
	    			}
	    		}
	    	}
	    	ps.close();
	    	conn.close();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    public static String getConfigString(String parameter, String defaultValue) throws SQLException {
    	java.sql.Connection conn =  DriverManager.getConnection(url);
    	String returnValue=defaultValue;
    	PreparedStatement ps = conn.prepareStatement("select * from oc_config where oc_key=?");
    	ps.setString(1, parameter);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		returnValue=rs.getString("oc_value");
    		if(returnValue==null || returnValue.length()==0) {
    			returnValue=defaultValue;
    		}
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return returnValue;
    }
    
    public static String getConfigString(String parameter, String defaultValue, java.sql.Connection conn) throws SQLException {
    	String returnValue=defaultValue;
    	PreparedStatement ps = conn.prepareStatement("select * from oc_config where oc_key=?");
    	ps.setString(1, parameter);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		returnValue=rs.getString("oc_value");
    		if(returnValue==null || returnValue.length()==0) {
    			returnValue=defaultValue;
    		}
    	}
    	rs.close();
    	ps.close();
    	return returnValue;
    }
    
    public static int getConfigInt(String parameter, int defaultValue) throws SQLException {
    	java.sql.Connection conn =  DriverManager.getConnection(url);
    	int returnValue=defaultValue;
    	PreparedStatement ps = conn.prepareStatement("select * from oc_config where oc_key=?");
    	ps.setString(1, parameter);
    	ResultSet rs = ps.executeQuery();
    	if(rs.next()) {
    		try {
    			returnValue=Integer.parseInt(rs.getString("oc_value"));
    		}
    		catch(Exception e) {
    			e.printStackTrace();
    		}
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return returnValue;
    }
    
    public static HashSet getSpecimensReceived(int serverid, int transactionid) throws SQLException {
    	java.sql.Connection conn =  DriverManager.getConnection(url);
    	HashSet specimens = new HashSet();
    	PreparedStatement ps = conn.prepareStatement("select distinct monster from RequestedLabAnalyses a, LabAnalysis b where a.analysiscode=b.labcode and b.deletetime is null and serverid=? and transactionid=? and samplereceptiondatetime is not null");
    	ps.setInt(1, serverid);
    	ps.setInt(2, transactionid);
    	ResultSet rs = ps.executeQuery();
    	while(rs.next()) {
    		specimens.add(rs.getString("monster"));
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return specimens;
    }
    
    public static HashSet getSpecimensUnreceived(int serverid, int transactionid) throws SQLException {
    	java.sql.Connection conn =  DriverManager.getConnection(url);
    	HashSet specimens = new HashSet();
    	PreparedStatement ps = conn.prepareStatement("select distinct monster from RequestedLabAnalyses a, LabAnalysis b where a.analysiscode=b.labcode and b.deletetime is null and serverid=? and transactionid=? and samplereceptiondatetime is null");
    	ps.setInt(1, serverid);
    	ps.setInt(2, transactionid);
    	ResultSet rs = ps.executeQuery();
    	while(rs.next()) {
    		specimens.add(rs.getString("monster"));
    	}
    	rs.close();
    	ps.close();
    	conn.close();
    	return specimens;
    }
    
	public static HashSet setLabRequest(int serverid, int transactionid, OML_O33 message) throws SQLException, DataTypeException {
		java.sql.Connection conn = DriverManager.getConnection(url);
		HashSet exportedAnalyses = new HashSet();

		//We first organize the labanalyses according to their sample specification
		//Only received and not yet sent samples are taken into account (new samples)
		PreparedStatement ps = conn.prepareStatement("select * from requestedlabanalyses where analysiscode is not null and analysiscode<>'' and serverid=? and transactionid=? and worklisteddatetime is null and samplereceptiondatetime is not null");
		System.out.println("Reading analyses for transaction id "+transactionid);
		ps.setInt(1,serverid);
		ps.setInt(2,transactionid);
		ResultSet rs = ps.executeQuery();
		Hashtable r_analyses = new Hashtable();
		Hashtable r_reversanalyses = new Hashtable();
		Hashtable specimendates = new Hashtable();
		HashSet receivedSpecimens=getSpecimensReceived(serverid, transactionid);
		while(rs.next()) {
			String labcode=rs.getString("analysiscode");
			String specimencode = HL7Server.getSpecimenTypeByLabCode(labcode, conn);
			specimendates.put(specimencode,rs.getTimestamp("samplereceptiondatetime"));
			System.out.println("Specimencode = "+specimencode+" for labcode = "+labcode);
			String analysercode = "";
			if(getConfigString("labanalysercodemapping","loinc").equalsIgnoreCase("loinc")) {
				analysercode = HL7Server.getMedidocCodeByLabCode(labcode, conn);
				if(analysercode.length()==0) {
					if(getConfigInt("labanalysercodemappingallowmismatches",0)==1) {
						analysercode=labcode+";L"; //L = Local coding system
					}
				}
				else {
					analysercode+=";LN"; //LN = LOINC coding system
				}
			}
			else {
				analysercode = HL7Server.getAnalyserCodeByLabCode(labcode, conn);
				if(analysercode.length()==0) {
					if(getConfigInt("labanalysercodemappingmismatchesreplacebylocalcode",0)==1) {
						analysercode=labcode;
					}
				}
				else {
					analysercode+=";L"; //L = Local coding system
				}
			}
			System.out.println("Found analyzer code = "+analysercode+" for labcode = "+labcode);
			if(checkString(analysercode).length()>0 && labcode.length()>0) {
				if(r_analyses.get(specimencode)==null) {
					r_analyses.put(specimencode, new Vector());
				}
				Vector v_analyses = (Vector)r_analyses.get(specimencode);
				v_analyses.add(analysercode);
				System.out.println("Number of analyses for specimencode "+specimencode+" = "+v_analyses.size());
				exportedAnalyses.add(labcode+";"+specimencode);
				r_reversanalyses.put(analysercode, labcode);
			}
			else {
				System.out.println("HL7-OML_O33 ERROR: Missing Analyser code for lab analysis '"+labcode+"'");
				exportedAnalyses.add(labcode);
			}
		}
		rs.close();
		ps.close();
		System.out.println("Number of specimens in order: "+r_analyses.size());
		Enumeration e_specimens = r_analyses.keys();
		int counter=0;
		while(e_specimens.hasMoreElements()) {
			String spec = (String)e_specimens.nextElement();
			System.out.println("Exporting specimen = "+counter+"/"+spec);
			
			if(spec.length()>0) {
				String barcodeid=Labo.getLabBarcode(serverid+"."+transactionid+"."+spec,true,conn);
				OML_O33_SPECIMEN omlspm = message.getSPECIMEN(counter);
				SPM spm = omlspm.getSPM();
				spm.getSetIDSPM().setValue(counter+"");
				spm.getSpecimenID().getPlacerAssignedIdentifier().getEntityIdentifier().setValue(barcodeid);
				spm.getSpecimenType().getIdentifier().setValue(spec);
				if(specimendates.get(spec)!=null) {
					spm.getSpecimenCollectionDateTime().getRangeStartDateTime().getTime().setValue((Timestamp)specimendates.get(spec));
				}
				
				Vector v_analyses = (Vector)r_analyses.get(spec);
				System.out.println("Number of analyses in specimen "+spec+" = "+v_analyses.size());
				for(int n=0;n<v_analyses.size();n++) {
					String analysercode = (String)v_analyses.elementAt(n);
					if(analysercode.length()>0) {
						System.out.println("Exporting analyser code = "+analysercode);
						OML_O33_ORDER omlorder = omlspm.getORDER(n);
						ORC orc = omlorder.getORC();
						int version = HL7Server.getTransactionVersion(serverid, transactionid);
						if(version==1) {
							orc.getOrderControl().setValue("NW");
						}
						else {
							orc.getOrderControl().setValue("RP");
						}
						orc.getDateTimeOfTransaction().getTime().setValue(HL7Server.getTransactionUpdateTime(serverid, transactionid));
						orc.getQuantityTiming(0).getQuantity().getCq1_Quantity().setValue("1");
						String userid = HL7Server.getTransactionUserId(serverid, transactionid)+"";
						if(userid.length()>0) {
							orc.getOrderingProvider(0).getIDNumber().setValue(userid);
							orc.getOrderingProvider(0).getFamilyName().getSurname().setValue(HL7Server.getUserLastname(userid));
							orc.getOrderingProvider(0).getGivenName().setValue(HL7Server.getUserFirstname(userid));
						}
						orc.getPlacerOrderNumber().getEntityIdentifier().setValue(serverid+"."+transactionid);		
						orc.getFillerOrderNumber().getEntityIdentifier().setValue(serverid+"."+transactionid);
						
						OML_O33_OBSERVATION_REQUEST omlobr = omlorder.getOBSERVATION_REQUEST();
						OBR obr = omlobr.getOBR();
						obr.getSetIDOBR().setValue("1");
						obr.getPlacerOrderNumber().getEntityIdentifier().setValue(serverid+"."+transactionid);		
						obr.getFillerOrderNumber().getEntityIdentifier().setValue(serverid+"."+transactionid);
						obr.getSpecimenReceivedDateTime().getTime().setValue(HL7Server.getSpecimenReceivedDateTime(serverid,transactionid,(String)r_reversanalyses.get(analysercode)));
						obr.getUniversalServiceIdentifier().getIdentifier().setValue(analysercode.split(";")[0]);
					}
				}
				System.out.println("End of export for specimen "+spec);
				counter++;
			}
			System.out.println("End of export for transaction id "+transactionid);
		}
		conn.close();
		return exportedAnalyses;
	}
}
